import pandas as pd
import streamlit as st
from io import BytesIO
from function_ratio import calculate_metabolite_ratios
from constants import *
from utils import *

st.title("–ú–µ—Ç–∞–±–æ–ª–∏—Ç–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è")

panel = main_radio_button_study()

if panel == "–ß–µ–ª–æ–≤–µ–∫":
   # –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
   with st.sidebar:
        st.sidebar.selectbox("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è (–ø–æ–∏—Å–∫)", all_possible_ratios)

        # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        st.sidebar.metric(label="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π", value=len(all_possible_ratios))

   uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel", type=["xlsx"],key="human_uploader")

else:
   # –°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Äî –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
   with st.sidebar:
        st.sidebar.selectbox("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è (–ø–æ–∏—Å–∫)", all_possible_ratios)

        # –í—ã–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
        st.sidebar.metric(label="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π", value=len(all_possible_ratios))

   uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel", type=["xlsx"],key="zebra_uploader")

if uploaded_file is not None:
    try:
        # –ß—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ "–º–µ—Ç–∞–±–æ–ª–∏—Ç—ã"
        data = pd.read_excel(uploaded_file)
        
        if panel == "–ß–µ–ª–æ–≤–µ–∫":
           # –†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
           output_data, ratios_data, missing_cols, skipped_ratios, calculated_ratios,successful_ratios = calculate_metabolite_ratios(data)
        else:
           output_data, ratios_data, missing_cols, skipped_ratios, calculated_ratios,successful_ratios = calculate_metabolite_ratios(data)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–∞—Ö
        tab1, tab2 = st.tabs(["üß¨ –ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã", "üìà –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è"])

        with tab1:
            st.subheader("–ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã")
            st.dataframe(output_data)

        with tab2:
            st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è")
            st.dataframe(ratios_data)

        with st.sidebar:
             st.header("üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å—á—ë—Ç–æ–≤")

             if missing_cols or skipped_ratios:
                 with st.expander("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—á—ë—Ç–∞–º–∏"):

                     if missing_cols:
                         st.markdown("**‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏:**")
                         selected_col = st.selectbox(
                             "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É",
                             options=missing_cols,
                             format_func=lambda x: f"üß© {x}"
                         )
                         st.caption(f"–ö–æ–ª–æ–Ω–∫–∞ `{selected_col}` –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")

                     if skipped_ratios:
                         st.markdown("**üîÅ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è:**")
                         ratio_options = [f"{r} (–Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: {', '.join(m)})" for r, m in skipped_ratios]
                         selected_ratio = st.selectbox(
                             "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
                             options=ratio_options,
                             format_func=lambda x: f"üìâ {x}"
                         )
                         st.caption(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {selected_ratio}")

             if calculated_ratios:
                 with st.expander("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ"):

                     ratio_options = [f"{r} (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å: {', '.join(m)})" for r, m in successful_ratios]
                     selected_ratio = st.selectbox(
                         "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ",
                         options=ratio_options,
                         format_func=lambda x: f"üìâ {x}"
                     )
                     st.caption(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {selected_ratio}")

        # –†–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        sheet_option = st.radio(
            "–ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?",
            ('–ù–∞ –æ–¥–∏–Ω –ª–∏—Å—Ç', '–ù–∞ —Ä–∞–∑–Ω—ã–µ –ª–∏—Å—Ç—ã')
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if st.button("–°–∫–∞—á–∞—Ç—å Excel"):
            excel_buffer = BytesIO()

            with pd.ExcelWriter(excel_buffer, engine='xlsxwriter') as writer:
                if sheet_option == '–ù–∞ –æ–¥–∏–Ω –ª–∏—Å—Ç':
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                    combined_df = pd.concat([output_data, ratios_data], axis=1)
                    combined_df.to_excel(writer, index=False, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
                else:
                    output_data.to_excel(writer, index=False, sheet_name='–ú–µ—Ç–∞–±–æ–ª–∏—Ç—ã')
                    ratios_data.to_excel(writer, index=False, sheet_name='–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è')

            excel_bytes = excel_buffer.getvalue()

            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                data=excel_bytes,
                file_name="—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª.")
